package busstation;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.IOException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Excalibur
 */
public class CustomerVie extends javax.swing.JFrame {
//Login tes = new Login();
    private final readFiles obj = new readFiles();
    private trips find = new trips();
    private ArrayList<trips> wanted = new ArrayList<>();
    private String rowData[] = new String[8];
    private ArrayList<Integer> index = new ArrayList<>();
    private ArrayList<Integer> index2 = new ArrayList<>();

    /**
     *
     */
    

    /**
     *
     */
    protected String username;
    int logedin;    

    /**
     * Creates new form CustomerView
     *
     * @throws java.io.IOException
     */
    public CustomerVie() throws IOException {

        initComponents();
       setLocation(200,25);
        obj.readFile();
        
        fromDest.setModel(new DefaultComboBoxModel(obj.stringCitiesDep()));
        toDest.setModel(new DefaultComboBoxModel(obj.stringCitiesDest()));
        fromDest2.setModel(new DefaultComboBoxModel(obj.stringCitiesDep()));
        toDest2.setModel(new DefaultComboBoxModel(obj.stringCitiesDest()));
        tDate.setModel(new DefaultComboBoxModel(stringDate()));
        depDate.setModel(new DefaultComboBoxModel(stringDate()));
        reDate.setModel(new DefaultComboBoxModel(stringDate()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        tripList = new javax.swing.JPanel();
        tab1 = new javax.swing.JLabel();
        toDest = new javax.swing.JComboBox<String>();
        fromDest = new javax.swing.JComboBox<String>();
        from1 = new javax.swing.JLabel();
        to1 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        travelD1 = new javax.swing.JLabel();
        tDate = new javax.swing.JComboBox<String>();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultsTab1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        tabColor2 = new javax.swing.JPanel();
        tab2 = new javax.swing.JLabel();
        from2 = new javax.swing.JLabel();
        fromDest2 = new javax.swing.JComboBox<String>();
        to2 = new javax.swing.JLabel();
        toDest2 = new javax.swing.JComboBox<String>();
        jLabel1 = new javax.swing.JLabel();
        depDate = new javax.swing.JComboBox<String>();
        jLabel2 = new javax.swing.JLabel();
        reDate = new javax.swing.JComboBox<String>();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultsTab2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        resultsTab3 = new javax.swing.JTable();
        resTrip = new javax.swing.JButton();
        Signout = new java.awt.Button();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        jTabbedPane1.setBackground(new java.awt.Color(255, 153, 51));

        tripList.setBackground(new java.awt.Color(0, 0, 51));
        tripList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tripList.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        tab1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        tab1.setForeground(new java.awt.Color(204, 102, 0));
        tab1.setText("One way trips");

        toDest.setBackground(new java.awt.Color(255, 102, 51));
        toDest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toDestMouseClicked(evt);
            }
        });
        toDest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDestActionPerformed(evt);
            }
        });

        fromDest.setBackground(new java.awt.Color(255, 102, 51));
        fromDest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fromDestMouseClicked(evt);
            }
        });
        fromDest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromDestActionPerformed(evt);
            }
        });

        from1.setForeground(new java.awt.Color(204, 102, 0));
        from1.setText("From");

        to1.setForeground(new java.awt.Color(204, 102, 0));
        to1.setText("To");

        searchButton.setBackground(new java.awt.Color(255, 102, 51));
        searchButton.setText("Find Trips");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        travelD1.setForeground(new java.awt.Color(204, 102, 0));
        travelD1.setText("Travel Date");

        tDate.setBackground(new java.awt.Color(255, 102, 51));
        tDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tDateMouseClicked(evt);
            }
        });

        resultsTab1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trip code", "Departure", "Destination", "Date", "Time", "Car type", "Number of stops", "Seats available"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTab1.getTableHeader().setReorderingAllowed(false);
        resultsTab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTab1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(resultsTab1);
        if (resultsTab1.getColumnModel().getColumnCount() > 0) {
            resultsTab1.getColumnModel().getColumn(0).setResizable(false);
            resultsTab1.getColumnModel().getColumn(1).setResizable(false);
            resultsTab1.getColumnModel().getColumn(2).setResizable(false);
            resultsTab1.getColumnModel().getColumn(3).setResizable(false);
            resultsTab1.getColumnModel().getColumn(4).setResizable(false);
            resultsTab1.getColumnModel().getColumn(5).setResizable(false);
            resultsTab1.getColumnModel().getColumn(6).setResizable(false);
            resultsTab1.getColumnModel().getColumn(7).setResizable(false);
        }

        javax.swing.GroupLayout tripListLayout = new javax.swing.GroupLayout(tripList);
        tripList.setLayout(tripListLayout);
        tripListLayout.setHorizontalGroup(
            tripListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tripListLayout.createSequentialGroup()
                .addGroup(tripListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tripListLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tripListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromDest, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(tripListLayout.createSequentialGroup()
                                .addComponent(from1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(126, 126, 126)
                                .addComponent(to1))
                            .addGroup(tripListLayout.createSequentialGroup()
                                .addGroup(tripListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(travelD1)
                                    .addComponent(tDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addGroup(tripListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(toDest, 0, 130, Short.MAX_VALUE)
                                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(tab1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tripListLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 839, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        tripListLayout.setVerticalGroup(
            tripListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tripListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab1)
                .addGap(15, 15, 15)
                .addGroup(tripListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(from1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tripListLayout.createSequentialGroup()
                        .addComponent(to1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(tripListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fromDest, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toDest, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(travelD1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tripListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(327, 327, 327))
        );

        jTabbedPane1.addTab("One way", tripList);

        tabColor2.setBackground(new java.awt.Color(0, 0, 51));

        tab2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        tab2.setForeground(new java.awt.Color(204, 102, 0));
        tab2.setText("Round trips");

        from2.setForeground(new java.awt.Color(204, 102, 0));
        from2.setText("From");

        fromDest2.setBackground(new java.awt.Color(255, 102, 51));

        to2.setForeground(new java.awt.Color(204, 102, 0));
        to2.setText("To");

        toDest2.setBackground(new java.awt.Color(255, 102, 51));

        jLabel1.setForeground(new java.awt.Color(204, 102, 0));
        jLabel1.setText("Departure date");

        depDate.setBackground(new java.awt.Color(255, 102, 51));

        jLabel2.setForeground(new java.awt.Color(204, 102, 0));
        jLabel2.setText("Return date");

        reDate.setBackground(new java.awt.Color(255, 102, 51));

        jButton1.setBackground(new java.awt.Color(255, 102, 51));
        jButton1.setText("Find Trips");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 102, 0));
        jLabel3.setText("Return Trip");

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 102, 0));
        jLabel5.setText("Going trip");

        resultsTab2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trip code", "Departure", "Destination", "Date", "Time", "Car type", "Number of stops", "Seats available"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTab2.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(resultsTab2);
        if (resultsTab2.getColumnModel().getColumnCount() > 0) {
            resultsTab2.getColumnModel().getColumn(0).setResizable(false);
            resultsTab2.getColumnModel().getColumn(1).setResizable(false);
            resultsTab2.getColumnModel().getColumn(2).setResizable(false);
            resultsTab2.getColumnModel().getColumn(3).setResizable(false);
            resultsTab2.getColumnModel().getColumn(4).setResizable(false);
            resultsTab2.getColumnModel().getColumn(5).setResizable(false);
            resultsTab2.getColumnModel().getColumn(6).setResizable(false);
            resultsTab2.getColumnModel().getColumn(7).setResizable(false);
        }

        resultsTab3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trip code", "Departure", "Destination", "Date", "Time", "Car type", "Stops", "Seats"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTab3.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(resultsTab3);
        if (resultsTab3.getColumnModel().getColumnCount() > 0) {
            resultsTab3.getColumnModel().getColumn(0).setResizable(false);
            resultsTab3.getColumnModel().getColumn(1).setResizable(false);
            resultsTab3.getColumnModel().getColumn(2).setResizable(false);
            resultsTab3.getColumnModel().getColumn(3).setResizable(false);
            resultsTab3.getColumnModel().getColumn(4).setResizable(false);
            resultsTab3.getColumnModel().getColumn(5).setResizable(false);
            resultsTab3.getColumnModel().getColumn(6).setResizable(false);
            resultsTab3.getColumnModel().getColumn(7).setResizable(false);
        }

        resTrip.setText("Reserve Trip");
        resTrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resTripActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabColor2Layout = new javax.swing.GroupLayout(tabColor2);
        tabColor2.setLayout(tabColor2Layout);
        tabColor2Layout.setHorizontalGroup(
            tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabColor2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tabColor2Layout.createSequentialGroup()
                        .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabColor2Layout.createSequentialGroup()
                                .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(depDate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(from2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fromDest2, 0, 130, Short.MAX_VALUE)
                                    .addComponent(jLabel1)
                                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(34, 34, 34)
                                .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2)
                                    .addComponent(toDest2, 0, 130, Short.MAX_VALUE)
                                    .addComponent(to2)
                                    .addComponent(reDate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(resTrip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(tab2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tabColor2Layout.setVerticalGroup(
            tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabColor2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tab2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabColor2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(from2)
                            .addComponent(to2))
                        .addGap(5, 5, 5)
                        .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fromDest2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toDest2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(5, 5, 5)
                        .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(depDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(tabColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabColor2Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabColor2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(resTrip, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabColor2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabColor2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabColor2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Round trip", jPanel1);

        Signout.setBackground(new java.awt.Color(51, 51, 51));
        Signout.setForeground(new java.awt.Color(204, 102, 0));
        Signout.setLabel("Sign Out");
        Signout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Signout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Signout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 876, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fromDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromDestActionPerformed

    }//GEN-LAST:event_fromDestActionPerformed

    private void fromDestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fromDestMouseClicked

    }//GEN-LAST:event_fromDestMouseClicked

    private void toDestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toDestMouseClicked

    }//GEN-LAST:event_toDestMouseClicked

    private void toDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDestActionPerformed

    }//GEN-LAST:event_toDestActionPerformed

    private void tDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tDateMouseClicked

    }//GEN-LAST:event_tDateMouseClicked

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        find.depart = fromDest.getSelectedItem().toString();
        find.destination = toDest.getSelectedItem().toString();
        find.date = tDate.getSelectedItem().toString();
        //find.time=tTime.getSelectedItem().toString();
        resultsTab1.setModel(fillTable());
    }//GEN-LAST:event_searchButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        find.depart = fromDest2.getSelectedItem().toString();
        find.destination = toDest2.getSelectedItem().toString();
        find.date = depDate.getSelectedItem().toString();
        find.time = reDate.getSelectedItem().toString();
        resultsTab2.setModel(fillTable());
        resultsTab3.setModel(fillTable2());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void resultsTab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTab1MouseClicked
        if(logedin==1){
        int i, res;
        i = resultsTab1.getSelectedRow();
        res = JOptionPane.showConfirmDialog(null, "The price of this trip is " + String.valueOf(obj.trip.get(i).price) + " L.E. do you want to reserve this trip?");
        if (res == 0) {
            subRes(index.get(i));
            int cos;
            for ( cos = 0; cos < obj.cutomer.size(); cos++) {
                if (username.equalsIgnoreCase(obj.cutomer.get(cos).userName)) {
                    obj.cutomer.get(cos).trips.add(obj.trip.get(index.get(i)).tripCode);
                }

            }
            
           obj.saveTripsFile();

        }}
        else{
        JOptionPane.showMessageDialog(fromDest,"You have to have an account to Reserve !!");
        }
    }//GEN-LAST:event_resultsTab1MouseClicked

    private void resTripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resTripActionPerformed
if(logedin==1){
        int i, i2, res;
        i = resultsTab2.getSelectedRow();
        i2 = resultsTab3.getSelectedRow();
        if (i == -1 && i2 == -1) {
            JOptionPane.showMessageDialog(null, "You must select a trip from each table!");
        } else if (i != -1 && i2 == -1) {
            JOptionPane.showMessageDialog(null, "You must choose a trip in the returns tables");
        } else if (i == -1 && i2 != -1) {
            JOptionPane.showMessageDialog(null, "You must choose a trip in the first trip table");
        } else {
            double b = obj.trip.get(i).price * 1.5;
            res = JOptionPane.showConfirmDialog(null, "The price of this trip is " + b + " L.E. do you want to reserve this trip?");
            if (res == 0) {
                subRes(index.get(i));
                subRes(index2.get(i2));
            }
        }}
else{
JOptionPane.showMessageDialog(null,"You have sigin in to reserver ");
}
    }//GEN-LAST:event_resTripActionPerformed

    private void SignoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignoutActionPerformed
        try {
            // TODO add your handling code here:
            Login h = new Login();
            h.setVisible(true);
            setVisible(false);
        } catch (IOException ex) {
            Logger.getLogger(CustomerVie.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SignoutActionPerformed
    /* String [] dest = {"Cario","Alexandrea","Matrouh","Hurgada"};
     JComboBox fromDest = new JComboBox(dest);
     fromDest.setSelectedIndex(4);
     fromDest.addActionListener(this);*/

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerVie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new CustomerVie().setVisible(false);
                } catch (IOException ex) {
                    Logger.getLogger(CustomerVie.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button Signout;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> depDate;
    private javax.swing.JLabel from1;
    private javax.swing.JLabel from2;
    private javax.swing.JComboBox<String> fromDest;
    private javax.swing.JComboBox<String> fromDest2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> reDate;
    private javax.swing.JButton resTrip;
    private javax.swing.JTable resultsTab1;
    private javax.swing.JTable resultsTab2;
    private javax.swing.JTable resultsTab3;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> tDate;
    private javax.swing.JLabel tab1;
    private javax.swing.JLabel tab2;
    private javax.swing.JPanel tabColor2;
    private javax.swing.JLabel to1;
    private javax.swing.JLabel to2;
    private javax.swing.JComboBox<String> toDest;
    private javax.swing.JComboBox<String> toDest2;
    private javax.swing.JLabel travelD1;
    private javax.swing.JPanel tripList;
    // End of variables declaration//GEN-END:variables

    private void subRes(int i) {
        obj.trip.get(i).availableSeats = obj.trip.get(i).availableSeats - 1;
        obj.trip.get(i).seats=obj.trip.get(i).seats+1;
    }

    

    

    /*private String[] stringTime()
     {
        
     ArrayList<String> list = new ArrayList<>();
     Set<String> hs = new HashSet<>();
     for(int i=0;i<obj.trip.size();i++){
     list.add(obj.trip.get(i).time);
     }
     hs.addAll(list);
     list.clear();
     list.addAll(hs);
     String [] s=new String[list.size()];
     list.toArray(s);
     return s;
     }*/
    private String[] stringDate() {

        ArrayList<String> list = new ArrayList<>();
        Set<String> hs = new HashSet<>();
        int i;
        for ( i = 0; i < obj.trip.size(); i++) {
            list.add(obj.trip.get(i).date);
        }
        hs.addAll(list);
        list.clear();
        list.addAll(hs);
        String[] s = new String[list.size()];
        list.toArray(s);
        return s;
    }

    private ArrayList<trips> search() {
        ArrayList<trips> temp = new ArrayList<>();
        for (int i = 0; i < obj.trip.size(); i++) {
            if (find.depart.equalsIgnoreCase(obj.trip.get(i).depart) && find.destination.equalsIgnoreCase(obj.trip.get(i).destination) && find.date.equalsIgnoreCase(obj.trip.get(i).date)) {
                temp.add(obj.trip.get(i));
                index.add(i);
            }
        }
        return temp;
    }

    private ArrayList<trips> search2() {
        ArrayList<trips> temp = new ArrayList<>();
        for (int i = 0; i < obj.trip.size(); i++) {
            if (find.depart.equalsIgnoreCase(obj.trip.get(i).destination) && find.destination.equalsIgnoreCase(obj.trip.get(i).depart) && find.time.equalsIgnoreCase(obj.trip.get(i).date)) {
                temp.add(obj.trip.get(i));
                index2.add(i);
            }
        }
        return temp;
    }

    private DefaultTableModel fillTable() {
        DefaultTableModel tModel1 = (DefaultTableModel) resultsTab1.getModel();
        tModel1.setRowCount(0);
        wanted = search();
        int i;
        for (i = 0; i < wanted.size(); i++) {
            rowData[0] = wanted.get(i).tripCode;
            rowData[1] = wanted.get(i).depart;
            rowData[2] = wanted.get(i).destination;
            rowData[3] = wanted.get(i).date;
            rowData[4] = wanted.get(i).time;
            rowData[5] = wanted.get(i).vehicle;
            rowData[6] = String.valueOf(wanted.get(i).stops);
            rowData[7] = String.valueOf(wanted.get(i).availableSeats);
            tModel1.addRow(rowData);
        }
        //resultsTab1.setModel(tModel1);
        return tModel1;
    }

    private DefaultTableModel fillTable2() {
        DefaultTableModel tModel1 = (DefaultTableModel) resultsTab3.getModel();
        tModel1.setRowCount(0);
        wanted = search2();
        int i;
        for ( i = 0; i < wanted.size(); i++) {
            rowData[0] = wanted.get(i).tripCode;
            rowData[1] = wanted.get(i).depart;
            rowData[2] = wanted.get(i).destination;
            rowData[3] = wanted.get(i).date;
            rowData[4] = wanted.get(i).time;
            rowData[5] = wanted.get(i).vehicle;
            rowData[6] = String.valueOf(wanted.get(i).stops);
            rowData[7] = String.valueOf(wanted.get(i).availableSeats);
            tModel1.addRow(rowData);
        }
        return tModel1;
    }

    /* public String[] getCities(){
     String [] cityList = new String[obj.trip.size()];
     for(i=0;i<obj.trip.size();i++){
     cityList[i]=obj.trip.get(i).depart;
     }
     return cityList;
     }
    
    
     public String[] filter(String [] tempString){
     ArrayList <String> list = new ArrayList();
     String[] tempArray = new String[tempString.length];
     int occurrence;
     int indexLocation = 0;
 
     for (int i = 0; i < tempString.length; i++)
     {
     occurrence = 0;
             
     for (int j = 0; j < i; j++)
     if (tempString[i].equals(tempString[j])) {
     occurrence++;
     if(occurrence>1){  
     tempString[i] = j+""+i;
     }
     }
             
     try{
     Integer.parseInt(tempString[i]);
     }
     catch(Exception e){  
     tempArray[indexLocation] = tempString[i];
     indexLocation++;
     }
     }
     for(i=0;i<tempString.length;i++){
     if(!tempArray[i].equals("null"))
     {
     list.add(tempArray[i]);
     } 
     }
     String [] s=new String[list.size()];
     list.toArray(s);
     return s;
     }*/
    /*public String [] filterCities(){
     int i =0;
     int k=0;
     boolean exsits;
     int listCounter=0;
     String [] list =new String [100];
     for (i=0;i<obj.trip.size();i++)
     {
     for(k=0;k<=i;k++)
     {
                
     }
     }
        
        
     }*/
}
